local ls = require("luasnip")
local s = ls.snippet
local f = ls.function_node
local fmta = require("luasnip.extras.fmt").fmta

local tex_utils = require("luasnip-utils.tex")

local macros = {
  "alpha",
  "beta",
  "gamma",
  "Gamma",
  "delta",
  "Delta",
  "epsilon",
  "varepsilon",
  "zeta",
  "eta",
  "theta",
  "vartheta",
  "Theta",
  "iota",
  "kappa",
  "lambda",
  "Lambda",
  "mu",
  "nu",
  "xi",
  "Xi",
  "pi",
  "Pi",
  "rho",
  "varrho",
  "sigma",
  "varsigma",
  "Sigma",
  "tau",
  "upsilon",
  "Upsilon",
  "phi",
  "varphi",
  "Phi",
  "chi",
  "psi",
  "Psi",
  "omega",
  "Omega",
  "oint",
  "iint",
  "iiint",
  "idotsint",
  "top",
  "Tr",
  "det",
  "Re",
  "Im",
  "rVert",
  "rvert",
  "rangle",
  "hbar",
  "dagger",
  "oplus",
  "bigoplus",
  "otimes",
  "bigotimes",
  "infty",
  "emptyset",
  "sum",
  "prod",
  "dots",
  "dotsc",
  "dotsm",
  "dotsb",
  "dotsi",
  "dotso",
  "cdots",
  "vdots",
  "ddots",
  "leftrightarrow",
  "longleftrightarrow",
  "Leftrightarrow",
  "Longleftrightarrow",
  "to",
  "mapsto",
  "setminus",
  "mid",
  "parallel",
  "cap",
  "cup",
  "wedge",
  "bigwedge",
  "vee",
  "bigvee",
  "bigcap",
  "bigcup",
  "in",
  "subset",
  "subseteq",
  "implies",
  "impliedby",
  "iff",
  "exists",
  "forall",
  "equiv",
  "coloneq",
  "eqcolon",
  "square",
  "neq",
  "gg",
  "ll",
  "sim",
  "simeq",
  "approx",
  "propto",
  "nabla",
  "div",
  "rot",
  "grad",
  "times",
  "cdot",
  "ell",
}

local generate_auto_space_macros = function()
  local snippets = {}
  for _, macro in pairs(macros) do
    table.insert(
      snippets,
      s(
        {
          trig = "\\" .. macro .. "([A-Za-z ])",
          dscr = "auto space " .. macro,
          regTrig = true,
          wordTrig = false,
          condition = tex_utils.in_mathzone,
          snippetType = "autosnippet",
        },
        fmta("\\" .. macro .. " <>", {
          f(function(_, snip)
            return string.gsub(snip.captures[1], "%s+", "")
          end),
        })
      )
    )
  end
  return snippets
end

return generate_auto_space_macros()
